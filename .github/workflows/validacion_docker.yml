# .github/workflows/validacion_docker.yml
name: Docker Build Validation Pipeline for validacion_docker

on:
  push:
    branches: [ main ] # O la rama principal que uses
  pull_request:
    branches: [ main ] # O la rama principal que uses

jobs:
  validate_docker_setup:
    name: Validate Docker Setup and Build
    runs-on: ubuntu-latest
    env:
      GIT_SHA: ${{ github.sha }}
      # El DOCKERHUB_USERNAME debe ser 'itzel-9'.
      # Este valor se obtiene del secret de GitHub.
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # No hay pasos de Python aqu√≠ porque el Dockerfile de ejemplo no ejecuta una app Python.

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./Dockerfile
          failure-threshold: warning

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate build and (conditionally) push with docker/build-push-action
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          # Etiquetas para la imagen usando 'itzel-9' directamente
          tags: |
            itzel-9/validacion_docker:${{ env.GIT_SHA }}
            itzel-9/validacion_docker:latest
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}

      - name: Validate build with docker/bake-action
        uses: docker/bake-action@v4
        with:
          push: false
          files: |
            ./docker-bake.hcl
          # Si el target 'app-check' en Bake necesitara generar etiquetas con 'itzel-9':
          # set: |
          #   app-check.tags=itzel-9/mi-app-bake-check:${{ env.GIT_SHA }}